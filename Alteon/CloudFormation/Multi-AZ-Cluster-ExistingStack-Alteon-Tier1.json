{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Basic Configuration"
          },
          "Parameters": [
            "VPC",
            "PublicSubnet",
            "AlteonSubnet1",
            "AlteonSubnet2",
            "Domain",
            "ScaleMinSize",
            "ScaleMaxSize",
            "PolicyTargetValue"
          ]
        },
        {
          "Label": {
            "default": "GEL Configuration"
          },
          "Parameters": [
            "ClusterThroughput",
            "GELThroughput",
            "GELType",
            "GELActivationID",
            "GELPRIMLLSURL",
            "GEL2NDLLSURL"
          ]
        },
        {
          "Label": {
            "default": "SLB Configuration"
          },
          "Parameters": [
            "SLBPORT",
            "SLBRPORT",
            "SLBMETRIC",
            "REALLIST",
            "asgname",
            "Certificate",
            "CertificatePass"
          ]
        }
      ],
      "ParameterLabels": {
        "Certificate": {
          "default": "Certificate string"
        },
        "asgname": {
          "default": "Servers Scale Group Name"
        },
        "CertificatePass": {
          "default": "Certificate Passphrase"
        },
        "Stack name": {
          "default": "Cluster Name"
        },
        "Domain": {
          "default": "Domain Name"
        },
        "GELActivationID": {
          "default": "Entitlement ID"
        },
        "GELPRIMLLSURL": {
          "default": "Primary License Server"
        },
        "GEL2NDLLSURL": {
          "default": "Secondary License Server"
        },
        "GELThroughput": {
          "default": "Required Throughput per instance"
        },
        "ClusterThroughput": {
          "default": "Expected maximum Throughput"
        },
        "GELType": {
          "default": "Required License Pack"
        },
        "SLBPORT": {
          "default": "Alteon TCP port"
        },
        "SLBRPORT": {
          "default": "App Server TCP port"
        },
        "ScaleMinSize": {
          "default": "Minimum Cluster Size"
        },
        "ScaleMaxSize": {
          "default": "Maximum Cluster Size"
        },
        "SLBMETRIC": {
          "default": "LB Method"
        },
        "REALLIST": {
          "default": "Real Server list"
        },
        "PolicyTargetValue": {
          "default": "Scaling Trigger"
        }
      }
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "AlteonAMI": "ami-8ff710e2",
        "GrafanaAMI": "ami-f5f41398"
      },
      "us-west-2": {
        "AlteonAMI": "ami-03aec83b563081c52",
        "GrafanaAMI": "ami-0429787ae1cd2be06"
      }
    }
  },
  "Parameters": {
    "PolicyTargetValue": {
      "Type": "String",
      "Description": "Value refers to Network traffic Bytes inside"
    },
    "asgname": {
      "Type": "String"
    },
    "Certificate": {
      "Type": "String",
      "Description": "PEM (base64) encoded Certificate text"
    },
    "CertificatePass": {
      "Type": "String",
      "Description": "Passphrase for the Private Key within the Certificate"
    },
    "ScaleMinSize": {
      "Type": "Number",
      "Description": "Minimum instances",
      "Default": 1,
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "ScaleMaxSize": {
      "Type": "Number",
      "Description": "Maximum instances",
      "Default": 2,
      "MinValue": "1",
      "MaxValue": "10"
    },
    "SLBRPORT": {
      "Type": "Number",
      "Description": "TCP/IP port to be used for sending traffic to the web server",
      "Default": 80,
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "SLBPORT": {
      "Type": "Number",
      "Description": "TCP/IP port to be used for recieving traffic on load balancer",
      "Default": 80,
      "MinValue": "1",
      "MaxValue": "65535"
    },
    "SLBMETRIC": {
      "Type": "String",
      "AllowedValues": [
        "Least Connections",
        "Round Robin"
      ],
      "Default": "Least Connections"
    },
    "Domain": {
      "Type": "String",
      "Default": "alteon.internal",
      "Description": "for maintaing scale group servers in route53"
    },
    "GELActivationID": {
      "Type": "String"
    },
    "REALLIST": {
      "Type": "String",
      "Description": "The list of static application servers seperated by \",\""
    },
    "GELPRIMLLSURL": {
      "Type": "String",
      "Description": "The URL of the Primary License server"
    },
    "GEL2NDLLSURL": {
      "Type": "String",
      "Description": "The URL of the Secondary License server"
    },
    "GELType": {
      "Type": "String",
      "AllowedValues": [
        "None",
        "Perform",
        "Secure"
      ]
    },
    "GELThroughput": {
      "Type": "Number",
      "AllowedValues": [
        25,
        50,
        100,
        200,
        500,
        1000,
        3000,
        6000,
        10000,
        17000,
        40000,
        100000,
        160000,
        225000
      ]
    },
    "ClusterThroughput": {
      "Type": "Number",
      "AllowedValues": [
        25,
        50,
        100,
        200,
        500,
        1000,
        3000,
        6000,
        10000,
        17000,
        40000,
        100000,
        160000,
        225000
      ]
    },
    "VPC": {
      "Type": "AWS::EC2::VPC::Id",
      "Description": "Please select a VPC"
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription" : "Must be an existing subnets with default route pointing to an associated internet gateway and should be residing in the selected Virtual Private Cloud."
    },
    "AlteonSubnet1": {
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription" : "Must be an existing subnets, without a default route and should be residing in the selected Virtual Private Cloud and located in the same AvailabilityZone as the PublicSubnet."
    },
    "AlteonSubnet2": {
      "Type": "AWS::EC2::Subnet::Id",
      "ConstraintDescription" : "Must be an existing subnets, without a default route and should be residing in the selected Virtual Private Cloud and located in the same AvailabilityZone as the PublicSubnet."
    }
  },
  "Resources": {
    "PublicSubnetInfo":{
      "DependsOn": ["AlteonRouteTblAssoc1","AlteonRouteTblAssoc2", "Grafana", "GrafanaEipAssoc","RadwareLambdaFunc","PrivateSubnetDefaultRoute"],
      "Type": "Custom::SubnetInfo",
      "Properties":{
        "ServiceToken": {"Fn::GetAtt": ["RadwareLambdaFunc", "Arn"]},
        "NameFilter": { "Ref": "PublicSubnet" }
      }
    },
    "PrivateRouteTbl": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Route"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "AlteonRouteTblAssoc1": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTbl"
        },
        "SubnetId": {
          "Ref": "AlteonSubnet1"
        }
      }
    },
    "AlteonRouteTblAssoc2": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTbl"
        },
        "SubnetId": {
          "Ref": "AlteonSubnet2"
        }
      }
    },

    "RadwareIntSecurityGrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Teir2SecGrp"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Alteon Security Group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 8443,
            "ToPort": 8443,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 2222,
            "ToPort": 2222,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 8080,
            "ToPort": 8080,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "icmp",
            "FromPort": 1,
            "ToPort": 1,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": 2090,
            "ToPort": 2090,
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "tcp",
            "FromPort": 3121,
            "ToPort": 3121,
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "tcp",
            "FromPort": 46000,
            "ToPort": 46000,
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "tcp",
            "FromPort": {"Ref": "SLBPORT"},
            "ToPort": {"Ref": "SLBPORT"},
            "CidrIp": "0.0.0.0/0"
          }
        ]
      } 
    },
    "RadwareExtSecurityGrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Tier1SecGrp"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Alteon Security Group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 8443,
            "ToPort": 8443,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 2222,
            "ToPort": 2222,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 3000,
            "ToPort": 3000,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "icmp",
            "FromPort": 1,
            "ToPort": 1,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "udp",
            "FromPort": 2090,
            "ToPort": 2090,
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "tcp",
            "FromPort": 3121,
            "ToPort": 3121,
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "tcp",
            "FromPort": 8444,
            "ToPort": 8444,
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "tcp",
            "FromPort": {"Ref": "SLBPORT"},
            "ToPort": {"Ref": "SLBPORT"},
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      } 
    },

    "GrafanaSecGrp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "GrafanaSecGrp"
                ]
              ]
            }
          }
        ],
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Alteon Security Group",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3000,
            "ToPort": 3000,
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "tcp",
            "FromPort": 9090,
            "ToPort": 9090,
            "CidrIp": "0.0.0.0/0"
          }, {
            "IpProtocol": "-1",
            "FromPort": -1,
            "ToPort": -1,
            "SourceSecurityGroupId": {"Ref": "RadwareExtSecurityGrp"}
          }, {
            "IpProtocol": "-1",
            "FromPort": -1,
            "ToPort": -1,
            "SourceSecurityGroupId": {"Ref": "RadwareIntSecurityGrp"}
          }
        ]
      }
    },
    "AlteonScaleLaunchConfig": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "DependsOn": [
        "RadwareExtSecurityGrp",
        "RadwareLambdaFunc",
        "CloudWatchRule",
        "LambdaLogPermission",
        "PublicSubnetInfo"
      ],
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AlteonAMI"
          ]
        },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\necho \"#!/usr/bin/env python\" >> /var/tmp/config_builder.py\n",
                "echo \"import fileinput",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict = {}\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"SLBPORT\\\"]=\\\"",
                {
                  "Ref": "SLBPORT"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"SLBRPORT\\\"]=\\\"",
                {
                  "Ref": "SLBRPORT"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"DNSSERVERIP\\\"]=\\\"",
                {"Fn::GetAtt": ["PublicSubnetInfo", "CidrBlock"]},
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"SLBMETRIC\\\"]=\\\"",
                {
                  "Ref": "SLBMETRIC"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"SS_NAME\\\"]=\\\"",
                {
                  "Ref": "AWS::StackName"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"REALSS_NAME\\\"]=\\\"",
                {
                  "Fn::Join": [
                    ".",
                    [
                      {
                        "Ref": "asgname"
                      },
                      {
                        "Ref": "Domain"
                      }
                    ]
                  ]
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"GEL_ACT_ID\\\"]=\\\"",
                {
                  "Ref": "GELActivationID"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"REALLIST\\\"]=\\\"",
                {
                  "Ref": "REALLIST"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"GELPRIMLLSURL\\\"]=\\\"",
                {
                  "Ref": "GELPRIMLLSURL"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"GEL2NDLLSURL\\\"]=\\\"",
                {
                  "Ref": "GEL2NDLLSURL"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"DPM_REPORT_INTERVAL\\\"]=\\\"15\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"DNSSERVERIP\\\"]=server_dict[\\\"DNSSERVERIP\\\"].split(\\\"/\\\")[0][:-2]+'.2'",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"output_file=open(\\\"/mnt/cf/Alteon/config/aws_converted_config.txt\\\", \\\"a+\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_DNS_menu_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif \\\"DNSSERVERIP\\\" in server_dict and len(server_dict[\\\"DNSSERVERIP\\\"]) > 1 and server_dict[\\\"DNSSERVERIP\\\"] != \\\"none\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/c/l3/dns\\n\\tprima \\\" + server_dict[\\\"DNSSERVERIP\\\"]+\\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def add_hc_probe_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/c/sys/health\\n\\ton\\n\\tadd 8080\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_DPM_report_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/cfg/sys/report/trigger\\n\\talways\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/cfg/sys/report/interval\\n\\t\\\" + server_dict[\\\"DPM_REPORT_INTERVAL\\\"] + \\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_license_server_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif server_dict[\\\"GELPRIMLLSURL\\\"] != \\\"\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/cfg/sys/licsrv\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\tif not (\\\"http://\\\" in server_dict[\\\"GELPRIMLLSURL\\\"]) and not (\\\"https://\\\" in server_dict[\\\"GELPRIMLLSURL\\\"]):",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\tserver_dict[\\\"GELPRIMLLSURL\\\"]=\\\"https://radware.flexnetoperations.com/\\\"+server_dict[\\\"GELPRIMLLSURL\\\"]+\\\"/requests\\\"",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"\\tena\\n\\tprimary \\\" + \\\"\\\\\\\"\\\" + server_dict[\\\"GELPRIMLLSURL\\\"] + \\\"\\\\\\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif server_dict[\\\"GEL2NDLLSURL\\\"] != \\\"\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"\tsecondry \\\" + \\\"\\\\\\\"\\\" + server_dict[\\\"GEL2NDLLSURL\\\"] + \\\"\\\\\\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_service_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif \\\"SLBPORT\\\" in server_dict and len(server_dict[\\\"SLBPORT\\\"]) > 1 and server_dict[\\\"SLBPORT\\\"] != \\\"\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\tif server_dict[\\\"SLBPORT\\\"] == \\\"443\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\toutput_file.write(\\\"/c/slb/ssl/sslpol 1\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\tif \\\"SLBRPORT\\\" in server_dict and server_dict[\\\"SLBPORT\\\"] == \\\"443\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\t\toutput_file.write(\\\"/c/slb/ssl/sslpol 1/backend\\\\n\\\\tssl enabled\\\\n\\\\tsni enabled\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\toutput_file.write(\\\"/c/slb/virt 1/service \\\" + server_dict[\\\"SLBPORT\\\"]+\\\" https\\\\n\\\\tgroup 1\\\\n\\\\trport \\\" + server_dict[\\\"SLBRPORT\\\"]+\\\"\\\\n\\\\tdbind forceproxy\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\toutput_file.write(\\\"/c/slb/virt 1/service \\\" + server_dict[\\\"SLBPORT\\\"]+\\\" https/ssl\\\\n\\\\tsrvrcert WebManagementCert\\\\n\\\\tsslpol 1\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\telse:",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\toutput_file.write(\\\"/c/slb/virt 1/service \\\" + server_dict[\\\"SLBPORT\\\"]+\\\" http\\\\n\\\\tgroup 1\\\\n\\\\trport \\\" + server_dict[\\\"SLBRPORT\\\"]+\\\"\\\\n\\\\tdbind forceproxy\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_reals_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif \\\"REALLIST\\\" in server_dict and server_dict[\\\"REALLIST\\\"] != \\\"\\\" and \\\".\\\" in server_dict[\\\"REALLIST\\\"]:",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\trealcount = 0",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\tfor real in server_dict[\\\"REALLIST\\\"].split(\\\",\\\"):",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\treal=real.replace(\\\" \\\", \\\"\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\tif real != \\\"\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\t\trealcount+=1",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\t\toutput_file.write(\\\"/c/slb/real \\\" + str(realcount) + \\\"\\\\n\\\\tena\\\\n\\\\trip \\\"+ real+\\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/c/slb/group 1\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\tfor i in range(1, realcount):",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\t\toutput_file.write(\\\"\\\\tadd \\\" + str(i) + \\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\telse:",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/c/slb/adv/fqdnreal \\\" + server_dict[\\\"SS_NAME\\\"] + \\\"\\\\n\\\\tena\\\\n\\\\tgroup 1\\\\n\\\\tfqdn \\\" + server_dict[\\\"REALSS_NAME\\\"] + \\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_DNS_menu_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_license_server_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"add_hc_probe_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_DPM_report_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_reals_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_service_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"azure_function_url ",
                {
                  "Fn::Join": [
                    "",
                    [
                      "https://",
                      {
                        "Ref": "LambdaApi"
                      },
                      ".execute-api.",
                      {
                        "Ref": "AWS::Region"
                      },
                      ".amazonaws.com",
                      "/Scaling",
                      "/Lambda"
                    ]
                  ]
                },
                "\" >> /disk/Alteon/config/cluster_va_flags\n",
                "sed -i 's/jsonData\\[.*/jsonData[\"instanceName\"] = '\\\"`curl http://169.254.169.254/latest/meta-data/instance-id -s`\\\"'/g' /disk/Alteon/Azure/scripts/clusterConfigSync.py"
              ]
            ]
          }
        },
        "SecurityGroups": [
          {
            "Ref": "RadwareIntSecurityGrp"
          }
        ],
        "InstanceType": "t3.medium"
      }
    },
    "AlteonScalePolicy":{
      "Type":"AWS::AutoScaling::ScalingPolicy",
      "Properties":{
        "AutoScalingGroupName":{
          "Ref":"AlteonScaleGroup"
        },
        "PolicyType":"TargetTrackingScaling",
        "TargetTrackingConfiguration":{
          "PredefinedMetricSpecification":{
            "PredefinedMetricType":"ASGAverageNetworkIn"
          },
          "TargetValue":{
            "Ref":"PolicyTargetValue"
          }
        }
      }
    },
    "AlteonScaleGroup": {
      "DependsOn": [
        "Grafana",
        "AlteonScaleLaunchConfig"
      ],
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": [
          {
            "Ref": "AlteonSubnet1"
          }, {
            "Ref": "AlteonSubnet2"
          }
        ],
        "LaunchConfigurationName": {
          "Ref": "AlteonScaleLaunchConfig"
        },
        "MinSize": {
          "Ref": "ScaleMinSize"
        },
        "MaxSize": {
          "Ref": "ScaleMaxSize"
        },
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
            "Metrics": [
              "GroupMinSize",
              "GroupMaxSize"
            ]
          }
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "scale"
                ]
              ]
            },
            "PropagateAtLaunch": "true"
          },
          {
            "Key": "DevType",
            "Value": "RadwareAlteon",
            "PropagateAtLaunch": "true"
          }
        ]
      }
    },
    "RadwareIAMRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
        ],
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "RadwareIAMPol",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents",
                    "ec2:DescribeSubnets"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "RadwareIAMPol": {
      "DependsOn": "RadwareIAMRole",
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "RadwareIAMPol",
        "Roles": [
          {
            "Ref": "RadwareIAMRole"
          },
          {
            "Ref": "ApiGatewayCloudWatchLogsRole"
          }
        ],
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "VisualEditor0",
              "Effect": "Allow",
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeAutoScalingGroups",
                "ec2:AttachNetworkInterface",
                "ec2:CreateNetworkInterface",
                "ec2:CreateTags",
                "ec2:DescribeInstances",
                "ec2:DeleteNetworkInterface",
                "ec2:DescribeNetworkInterfaces",
                "ec2:DescribeSubnets",
                "ec2:DescribeVpcs",
                "ec2:RebootInstances",
                "route53:ChangeResourceRecordSets",
                "route53:CreateHostedZone",
                "route53:GetHostedZone",
                "route53:ListHostedZones",
                "route53:ListResourceRecordSets",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": [
                "*"
              ]
            }
          ]
        }
      }
    },
    "RadwareAPIUser": {
      "Type": "AWS::IAM::User",
      "Properties": {
        "Path": "/",
        "LoginProfile": {
          "Password": "myP@ssW0rd"
        },
        "Policies": [
          {
            "PolicyName": "AmazonEC2ReadOnlyAccess",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:Describe*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "elasticloadbalancing:Describe*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:ListMetrics",
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:Describe*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "autoscaling:Describe*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "Tier1Alteon": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AlteonAMI"
          ]
        },
        "InstanceType": "m3.medium",
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0",
            "SubnetId": {
              "Ref": "PublicSubnet"
            },
            "GroupSet": [
              {
                "Ref": "RadwareExtSecurityGrp"
              }
            ]
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\necho \"#!/usr/bin/env python\" >> /var/tmp/config_builder.py\n",
                "echo \"import fileinput",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict = {}\">> /var/tmp/config_builder.py\n",
                "echo \"port2service = {}\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"SLBPORT\\\"]=\\\"",
                {
                  "Ref": "SLBPORT"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"GRAFANAIP\\\"]=\\\"",
                { "Fn::GetAtt": [ "GrafanaNetInt", "PrimaryPrivateIpAddress" ] },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"DNSSERVERIP\\\"]=\\\"",
                {"Fn::GetAtt": ["PublicSubnetInfo", "CidrBlock"]},
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"SS_NAME\\\"]=\\\"",
                {
                  "Ref": "AWS::StackName"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"REALSS_NAME\\\"]=\\\"",
                {
                  "Fn::Join": [
                    ".",
                    [
                      "alteon-cluster",
                      {
                        "Ref": "Domain"
                      }
                    ]
                  ]
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"GEL_ACT_ID\\\"]=\\\"",
                {
                  "Ref": "GELActivationID"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"REALLIST\\\"]=\\\"",
                {
                  "Ref": "REALLIST"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"GELPRIMLLSURL\\\"]=\\\"",
                {
                  "Ref": "GELPRIMLLSURL"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"GEL2NDLLSURL\\\"]=\\\"",
                {
                  "Ref": "GEL2NDLLSURL"
                },
                "\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"DPM_REPORT_INTERVAL\\\"]=\\\"15\\\"\">> /var/tmp/config_builder.py\n",
                "echo \"server_dict[\\\"DNSSERVERIP\\\"]=server_dict[\\\"DNSSERVERIP\\\"].split(\\\"/\\\")[0][:-2]+'.2'",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"21\\\"]=\\\"ftp\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"22\\\"]=\\\"ssh\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"23\\\"]=\\\"telnet\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"53\\\"]=\\\"dns\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"80\\\"]=\\\"http\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"443\\\"]=\\\"ssl\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"554\\\"]=\\\"rtsp\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"3389\\\"]=\\\"wts\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"port2service[\\\"5060\\\"]=\\\"sip\\\"","\">> /var/tmp/config_builder.py\n",
                "echo \"output_file=open(\\\"/mnt/cf/Alteon/config/aws_converted_config.txt\\\", \\\"a+\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_DNS_menu_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif \\\"DNSSERVERIP\\\" in server_dict and len(server_dict[\\\"DNSSERVERIP\\\"]) > 1 and server_dict[\\\"DNSSERVERIP\\\"] != \\\"none\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/c/l3/dns\\n\\tprima \\\" + server_dict[\\\"DNSSERVERIP\\\"]+\\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def add_hc_probe_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/c/sys/health\\n\\ton\\n\\tadd 8080\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_DPM_report_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/cfg/sys/report/trigger\\n\\talways\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/cfg/sys/report/interval\\n\\t\\\" + server_dict[\\\"DPM_REPORT_INTERVAL\\\"] + \\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_license_server_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif server_dict[\\\"GELPRIMLLSURL\\\"] != \\\"\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/cfg/sys/licsrv\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\tif not (\\\"http://\\\" in server_dict[\\\"GELPRIMLLSURL\\\"]) and not (\\\"https://\\\" in server_dict[\\\"GELPRIMLLSURL\\\"]):",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\t\tserver_dict[\\\"GELPRIMLLSURL\\\"]=\\\"https://radware.flexnetoperations.com/\\\"+server_dict[\\\"GELPRIMLLSURL\\\"]+\\\"/requests\\\"",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"\\tena\\n\\tprimary \\\" + \\\"\\\\\\\"\\\" + server_dict[\\\"GELPRIMLLSURL\\\"] + \\\"\\\\\\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif server_dict[\\\"GEL2NDLLSURL\\\"] != \\\"\\\":",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"\tsecondry \\\" + \\\"\\\\\\\"\\\" + server_dict[\\\"GEL2NDLLSURL\\\"] + \\\"\\\\\\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_service_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/c/slb/virt 1/service 8444 basic-slb\\\\n\\\\tgroup 1\\\\n\\\\trport 8443\\\\n\\\\tpbind clientip\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\tif server_dict[\\\"SLBPORT\\\"] in port2service:",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/c/slb/virt 1/service \\\" + server_dict[\\\"SLBPORT\\\"] + \\\" \\\"+ port2service[server_dict[\\\"SLBPORT\\\"]] + \\\" \\\\n\\\\tgroup 1\\\\n\\\\trport \\\" + server_dict[\\\"SLBPORT\\\"] + \\\"\\\\n\\\\tpbind clientip\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\telse:","\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/c/slb/virt 1/service \\\" + server_dict[\\\"SLBPORT\\\"] + \\\" basic-slb\\\\n\\\\tgroup 1\\\\n\\\\trport \\\" + server_dict[\\\"SLBPORT\\\"] + \\\"\\\\n\\\\tpbind clientip\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/c/slb/virt 1/service 22 ssh\\\\n\\\\tgroup 1\\\\n\\\\trport 2222\\\\n\\\\tpbind clientip\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\toutput_file.write(\\\"/c/slb/virt 1/service 3000 http\\\\n\\\\tgroup grafana\\\\n\\\\trport 3000\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"def convert_reals_to_config():",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/c/slb/adv/fqdnreal \\\" + server_dict[\\\"SS_NAME\\\"] + \\\"\\\\n\\\\tena\\\\n\\\\tgroup 1\\\\n\\\\tfqdn \\\" + server_dict[\\\"REALSS_NAME\\\"] + \\\"\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"\t\toutput_file.write(\\\"/c/slb/real grafana\\\\n\\\\tena\\\\n\\\\trip \\\" + server_dict[\\\"GRAFANAIP\\\"] + \\\"\\\\n/c/slb/group grafana\\\\n\\\\tadd grafana\\\\n\\\")",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_DNS_menu_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_license_server_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"add_hc_probe_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_DPM_report_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_reals_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "echo \"convert_service_to_config()",
                "\">> /var/tmp/config_builder.py\n",
                "sed -i 's/jsonData\\[.*/jsonData[\"instanceName\"] = '\\\"`curl http://169.254.169.254/latest/meta-data/instance-id -s`\\\"'/g' /disk/Alteon/Azure/scripts/clusterConfigSync.py"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Tier1Alteon"
                ]
              ]
            }
          }
        ]
      }
    },
    "Grafana": {
      "DependsOn": "GrafanaNetInt",
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "SourceDestCheck": false,
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "GrafanaAMI"
          ]
        },
        "InstanceType": "t2.micro",
        "NetworkInterfaces":[ {
         "NetworkInterfaceId" : { "Ref" : "GrafanaNetInt" }, "DeviceIndex" : "0" } ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [ 
                "#!/bin/bash\n",
                "sed -i 's/PUT_THE_ACCESS_KEY_HERE/",
                {"Ref": "RadwareAccessKey"},
                "/g' /etc/prometheus/prometheus.yml\n",
                "sed -i 's,PUT_THE_SECRET_KEY_HERE,",
                { "Fn::GetAtt": [ "RadwareAccessKey", "SecretAccessKey" ] },
                ",g' /etc/prometheus/prometheus.yml\n",
                "sed -i 's/PUT_THE_REGION_ID_HERE/",
                { "Ref": "AWS::Region" },
                "/g' /etc/prometheus/prometheus.yml\n",
                "sed -i 's/PUT_THE_STACK_NAME_HERE/",
                { "Ref": "AWS::StackName"},
                "/g' /etc/prometheus/prometheus.yml\n",
                "service prometheus restart\n",
                "ifconfig eth0 mtu 1490\n",
                "iptables -F\n",
                "iptables -t nat -F\n",
                "iptables -P INPUT ACCEPT\n",
                "iptables -P OUTPUT ACCEPT\n",
                "iptables -P FORWARD DROP\n",
                "iptables -t nat -A POSTROUTING -o eth0 -j SNAT --to-source $(hostname -I)\n",
                "metadata=\"http://169.254.169.254/latest/meta-data\"\n",
                "mac=$(curl -s $metadata/network/interfaces/macs/ | head -n1 | tr -d '/')\n",
                "cidr=$(curl -s $metadata/network/interfaces/macs/$mac/vpc-ipv4-cidr-block/)\n",
                "iptables -A FORWARD -i eth0 -o eth0 -s $cidr -j ACCEPT\n",
                "iptables -A FORWARD -i eth0 -o eth0 -m state --state ESTABLISHED,RELATED -j ACCEPT\n",
                "echo 1 > /proc/sys/net/ipv4/ip_forward\n",
                "echo 0 > /proc/sys/net/ipv4/conf/all/accept_redirects\n",
                "echo 0 > /proc/sys/net/ipv4/conf/eth0/accept_redirects\n",
                "echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects\n",
                "echo 0 > /proc/sys/net/ipv4/conf/eth0/send_redirects\n",
                "/etc/init.d/networking restart\n"
              ]
            ]
          }
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "_",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "Grafana"
                ]
              ]
            }
          }
        ]
      }
    },
    "RadwareAccessKey": {
      "Type": "AWS::IAM::AccessKey",
      "Properties": {
        "UserName": {
          "Ref": "RadwareAPIUser"
        }
      }
    },
    "RadwareLambdaFunc": {
      "Type": "AWS::Lambda::Function",
      "DependsOn": [
        "Grafana",
        "RadwareIAMRole",
        "RadwareIAMPol"
      ],
      "Properties": {
        "VpcConfig": {
          "SubnetIds": [
            {
              "Ref": "AlteonSubnet1"
            }, {
              "Ref": "AlteonSubnet2"
            }
          ],
          "SecurityGroupIds": [
            {"Ref": "RadwareIntSecurityGrp"}
          ]
        },
        "Code": {
          "S3Bucket": "cftempl",
          "S3Key": "aws_lambda_autoscale_ddns.zip"
        },
        "Role": {
          "Fn::GetAtt": [
            "RadwareIAMRole",
            "Arn"
          ]
        },
        "Timeout": 60,
        "Handler": "aws_lambda_autoscale_ddns.lambda_handler",
        "Runtime": "python2.7",
        "MemorySize": 128,
        "Environment": {
          "Variables": {
            "GELActivationID": { "Ref": "GELActivationID" },
            "GELThroughput": { "Ref": "GELThroughput" },
            "GELType": { "Ref": "GELType" },
            "Domain": { "Ref": "Domain" },
            "Certificate": { "Ref": "Certificate" },
            "certpass": { "Ref": "CertificatePass" },
            "event_region": { "Ref": "AWS::Region" },
            "event_vpc_id": {"Ref": "VPC"},
            "asgname": {"Ref": "asgname"},
            "AlteonHA": "disable",
            "AccessKey": {"Ref": "RadwareAccessKey" },
            "SecretKey": { "Fn::GetAtt": [ "RadwareAccessKey", "SecretAccessKey" ] }
          }
        }
      }
    },
    "PrivateSubnetDefaultRoute": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRouteTbl"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {
          "Ref": "Grafana"
        }
      }
    },
    "GrafanaNetInt" : {
      "Type" : "AWS::EC2::NetworkInterface",
      "Properties" : {
        "SubnetId": { "Ref" : "PublicSubnet" },
        "GroupSet" : [ { "Ref" : "GrafanaSecGrp" } ],
      }
    },
    "GrafanaPublicEip": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "GrafanaEipAssoc" : {
      "Type" : "AWS::EC2::EIPAssociation",
      "DependsOn": "Grafana",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "GrafanaPublicEip", "AllocationId" ]},
        "InstanceId" : {"Ref": "Grafana"}
      }
    },
    "AlteonPublicEip": {
      "Type": "AWS::EC2::EIP",
      "Properties": {
        "Domain": "vpc"
      }
    },
    "AlteonEipAssoc" : {
    "Type" : "AWS::EC2::EIPAssociation",
    "DependsOn": "Tier1Alteon",
    "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "AlteonPublicEip", "AllocationId" ]},
        "InstanceId" : {"Ref": "Tier1Alteon"}
      }
    },
    "CloudWatchRule": {
      "Type": "AWS::Events::Rule",
      "DependsOn": "RadwareLambdaFunc",
      "Properties": {
        "Description": "CloudWatchRule",
        "EventPattern": {
          "detail-type": [
            "EC2 Instance Launch Successful",
            "EC2 Instance Terminate Successful",
            "EC2 Instance Launch Unsuccessful",
            "EC2 Instance Terminate Unsuccessful",
            "EC2 Instance-launch Lifecycle Action",
            "EC2 Instance-terminate Lifecycle Action"
          ],
          "source": [
            "aws.autoscaling",
            "aws.ec2"
          ]
        },
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RadwareLambdaFunc",
                "Arn"
              ]
            },
            "Id": "RadwareLambdaFunc"
          }
        ]
      }
    },
    "LambdaApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "Lambda API",
        "Description": "API used for Lambda requests",
        "FailOnWarnings": true
      }
    },
    "LambdaApiStage": {
      "DependsOn": [
        "ApiGatewayAccount"
      ],
      "Type": "AWS::ApiGateway::Stage",
      "Properties": {
        "DeploymentId": {
          "Ref": "ApiDeployment"
        },
        "MethodSettings": [
          {
            "DataTraceEnabled": true,
            "HttpMethod": "*",
            "LoggingLevel": "INFO",
            "ResourcePath": "/*"
          }
        ],
        "RestApiId": {
          "Ref": "LambdaApi"
        },
        "StageName": "LATEST"
      }
    },
    "ApiDeployment": {
      "Type": "AWS::ApiGateway::Deployment",
      "DependsOn": "LambdaRequestPOST",
      "Properties": {
        "RestApiId": {
          "Ref": "LambdaApi"
        },
        "StageName": "Scaling"
      }
    },
    "LambdaResource": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "RestApiId": {
          "Ref": "LambdaApi"
        },
        "ParentId": {
          "Fn::GetAtt": [
            "LambdaApi",
            "RootResourceId"
          ]
        },
        "PathPart": "Lambda"
      }
    },
    "ApiGatewayCloudWatchLogsRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "apigateway.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ApiGatewayLogsPolicy",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "logs:GetLogEvents",
                    "logs:FilterLogEvents"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "ApiGatewayAccount": {
      "Type": "AWS::ApiGateway::Account",
      "Properties": {
        "CloudWatchRoleArn": {
          "Fn::GetAtt": [
            "ApiGatewayCloudWatchLogsRole",
            "Arn"
          ]
        }
      }
    },
    "LambdaAPIPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "RadwareLambdaFunc"
        },
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "LambdaApi"
              },
              "/*"
            ]
          ]
        }
      }
    },
    "LambdaLogPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:invokeFunction",
        "FunctionName": {
          "Ref": "RadwareLambdaFunc"
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "CloudWatchRule",
            "Arn"
          ]
        }
      }
    },
    "LambdaRequestPOST": {
      "DependsOn": "LambdaAPIPermission",
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "POST",
        "Integration": {
          "Type": "AWS",
          "IntegrationHttpMethod": "POST",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:aws:apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RadwareLambdaFunc",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          },
          "IntegrationResponses": [
            {
              "StatusCode": 200,
              "ResponseTemplates": {
                "application/json": "$input.json('$.body')"
              }
            }
          ]
        },
        "RequestParameters": {
          "method.request.querystring.name": false
        },
        "ResourceId": {
          "Ref": "LambdaResource"
        },
        "RestApiId": {
          "Ref": "LambdaApi"
        },
        "MethodResponses": [
          {
            "StatusCode": 200
          }
        ]
      }
    }
  },
  "Outputs": {
    "Tier1WBM": {
      "Description": "Tier 1 Alteon Web Based Management",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            { "Ref": "AlteonPublicEip" },
            ":8443/"
          ]
        ]
      }
    },
    "Tier1SSH": {
      "Description": "Tier 1 Alteon CLI Access",
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh -l admin -p 2222 ",
            { "Ref": "AlteonPublicEip" }
          ]
        ]
      }
    },
    "Grafana": {
      "Description": "Grafana Access",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            { "Ref": "AlteonPublicEip" },
            ":3000/"
          ]
        ]
      }
    },
    "Service": {
      "Description": "Application Access",
      "Value": {
        "Fn::Join": [
          "",
          [
            "http://",
            { "Ref": "AlteonPublicEip" }
          ]
        ]
      }
    }, 
    "Tier2WBM": {
      "Description": "Tier 2 Alteon Web Based Management",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            { "Ref": "AlteonPublicEip" },
            ":8444/"
          ]
        ]
      }
    },
    "Tier2SSH": {
      "Description": "Tier 2 Alteon CLI Access",
      "Value": {
        "Fn::Join": [
          "",
          [
            "ssh -l admin ",
            { "Ref": "AlteonPublicEip" }
          ]
        ]
      }
    }
  }
}
